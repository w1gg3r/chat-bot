"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon_1 = require("sinon");
const node_cron_1 = __importDefault(require("./node-cron"));
describe('node-cron', function () {
    let clock;
    beforeEach(function () {
        clock = (0, sinon_1.useFakeTimers)({
            now: new Date(2018, 0, 1, 0, 0, 0, 0),
            shouldAdvanceTime: true
        });
    });
    afterEach(function () {
        clock.restore();
    });
    describe('schedule', function () {
        it('should schedule a task', function () {
            return __awaiter(this, void 0, void 0, function* () {
                let executed = 0;
                const task = node_cron_1.default.schedule('* * * * * *', () => {
                    executed += 1;
                });
                clock.tick(2000);
                // adds a delay after tick
                yield new Promise(r => { setTimeout(r, 200); });
                chai_1.assert.equal(2, executed);
                task.stop();
            });
        });
        it('should schedule a task with America/Sao_Paulo timezone', function (done) {
            const startDate = new Date('Thu, 20 Sep 2018 00:00:00.000Z');
            clock.restore();
            clock = (0, sinon_1.useFakeTimers)(startDate);
            const task = node_cron_1.default.schedule('* * * * * *', (event) => {
                chai_1.assert.equal(19, event.date.getDate());
                chai_1.assert.equal(8, event.date.getMonth());
                chai_1.assert.equal(2018, event.date.getFullYear());
                chai_1.assert.equal(21, event.date.getHours());
                chai_1.assert.equal(0, event.date.getMinutes());
                chai_1.assert.equal(1, event.date.getSeconds());
                task.stop();
                done();
            }, {
                timezone: 'America/Sao_Paulo'
            });
            clock.tick(1000);
            task.stop();
        });
        it('should schedule a task with Europe/Rome timezone', function (done) {
            const startDate = new Date('Thu, 20 Sep 2018 00:00:00.000Z');
            clock.restore();
            clock = (0, sinon_1.useFakeTimers)(startDate);
            const task = node_cron_1.default.schedule('* * * * * *', (event) => {
                chai_1.assert.equal('2018-09-20T02:00:01.000+02:00', event.dateLocalIso);
                done();
            }, {
                timezone: 'Europe/Rome'
            });
            clock.tick(1000);
            task.stop();
        });
        it('should schedule a background task', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = node_cron_1.default.schedule('* * * * *', '../test-assets/dummy-task');
                yield wait(1000);
                chai_1.assert.isNotNull(task);
                chai_1.assert.isDefined(task);
                yield task.destroy();
            });
        }).timeout(10000);
    });
    describe('validate', function () {
        it('should validate a pattern', function () {
            chai_1.assert.isTrue(node_cron_1.default.validate('* * * * * *'));
        });
        it('should fail with a invalid pattern', function () {
            chai_1.assert.isFalse(node_cron_1.default.validate('62 * * * * *'));
        });
    });
    describe('createTask', function () {
        it('creates a inline task', function () {
            const task = node_cron_1.default.createTask('* * * * *', () => { });
            chai_1.assert.isDefined(task);
            chai_1.assert.isDefined(task.id);
            chai_1.assert.equal(task.getStatus(), 'stopped');
        });
        it('creates a background task', function () {
            const task = node_cron_1.default.createTask('* * * * *', '../test-assets/dummy-task');
            chai_1.assert.isDefined(task);
            chai_1.assert.isDefined(task.id);
            chai_1.assert.equal(task.getStatus(), 'stopped');
        });
    });
});
function wait(time) {
    return new Promise(r => setTimeout(r, time));
}
//# sourceMappingURL=node-cron.test.js.map