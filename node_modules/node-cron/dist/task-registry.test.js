"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const task_registry_1 = require("./task-registry");
const inline_scheduled_task_1 = require("./tasks/inline-scheduled-task");
describe('TaskRegistry', function () {
    const registry = new task_registry_1.TaskRegistry();
    afterEach(function () {
        registry.killAll();
    });
    it('adds a new task', function () {
        const task = createTask();
        registry.add(task);
        chai_1.assert.isTrue(registry.has(task.id));
    });
    it('does not add a task twice', function () {
        const task = createTask();
        registry.add(task);
        chai_1.assert.throws(() => {
            registry.add(task);
        }, `task ${task.id} already registred!`);
    });
    it('removes a task', function () {
        const task = createTask();
        registry.add(task);
        chai_1.assert.isTrue(registry.has(task.id));
        registry.remove(task);
        chai_1.assert.isFalse(registry.has(task.id));
    });
    it('removes a task when task is destroyed', function () {
        const task = createTask();
        registry.add(task);
        task.destroy();
        chai_1.assert.isFalse(registry.has(task.id));
    });
    it('gets a task', function () {
        const task = createTask();
        registry.add(task);
        const storedTask = registry.get(task.id);
        chai_1.assert.equal(task.id, storedTask === null || storedTask === void 0 ? void 0 : storedTask.id);
    });
    it('checks it has task by id', function () {
        const task = createTask();
        registry.add(task);
        chai_1.assert.isTrue(registry.has(task.id));
    });
    it('checks it has task by id when task does not exist', function () {
        chai_1.assert.isFalse(registry.has('invalid-id'));
    });
    it('returns all task', function () {
        registry.add(createTask());
        registry.add(createTask());
        registry.add(createTask());
        const tasks = registry.all();
        chai_1.assert.lengthOf(tasks, 3);
    });
    it('kills all tasks', function () {
        registry.add(createTask());
        registry.add(createTask());
        registry.add(createTask());
        const tasks = registry.all();
        registry.killAll();
        tasks.forEach(t => {
            chai_1.assert.equal(t.getStatus(), 'destroyed');
        });
    });
});
function createTask() {
    return new inline_scheduled_task_1.InlineScheduledTask('* * * * *', () => { });
}
//# sourceMappingURL=task-registry.test.js.map