"use strict";
/**
 * Node Cron
 *
 * A flexible cron-based task scheduling system that supports both inline functions and background task by providing a task file.
 * This module allows you to easily schedule tasks using cron expressions with support for timezones and
 * various execution options.
 *
 * @module node-cron
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inline_scheduled_task_1 = require("./tasks/inline-scheduled-task");
const task_registry_1 = require("./task-registry");
const pattern_validation_1 = __importDefault(require("./pattern/validation/pattern-validation"));
const background_scheduled_task_1 = __importDefault(require("./tasks/background-scheduled-task/background-scheduled-task"));
const path_1 = __importDefault(require("path"));
/**
 * The central registry that maintains all scheduled tasks.
 * @private
 */
const registry = new task_registry_1.TaskRegistry();
/**
 * Schedules a task to be executed according to the provided cron expression.
 *
 * @param expression - A cron expression (e.g. '* * * * *' for every minute) that determines when the task executes
 * @param func - Either a function to be executed or a file path to a module containing the task function
 * @param options - Optional configuration for the task including timezone and whether to start immediately
 * @returns The created task instance that can be used to control the task
 *
 * @example
 * // Schedule an inline function to run every minute
 * const task = schedule('* * * * *', () => console.log('Running every minute'));
 *
 * @example
 * // Schedule background task by providing a separate file to run daily with a specific timezone
 * const dailyTask = schedule('0 0 * * *', './tasks/daily-backup.js', { timezone: 'America/New_York' });
 */
function schedule(expression, func, options) {
    options = Object.assign({ scheduled: true }, options);
    const taskOptions = {
        name: options === null || options === void 0 ? void 0 : options.name,
        timezone: options === null || options === void 0 ? void 0 : options.timezone,
        noOverlap: options === null || options === void 0 ? void 0 : options.noOverlap,
        maxExecutions: options === null || options === void 0 ? void 0 : options.maxExecutions
    };
    const task = createTask(expression, func, taskOptions);
    task.start();
    return task;
}
/**
 * Creates a task instance based on the provided parameters adding it to the registry.
 *
 * @param expression - A cron expression that determines when the task executes
 * @param func - Either a function to be executed or a file path to a module containing the task function
 * @param options - Optional configuration for the task
 * @returns A task instance of the appropriate type (inline or background)
 * @private
 */
function createTask(expression, func, options) {
    const taskOptions = {
        timezone: options === null || options === void 0 ? void 0 : options.timezone
    };
    let task;
    if (func instanceof Function) {
        task = new inline_scheduled_task_1.InlineScheduledTask(expression, func, taskOptions);
    }
    else {
        const taskPath = solvePath(func);
        task = new background_scheduled_task_1.default(expression, taskPath, taskOptions);
    }
    registry.add(task);
    return task;
}
/**
 * Resolves a relative file path to an absolute path based on the caller's location.
 *
 * @param filePath - The path to the task file, can be absolute or relative
 * @returns The absolute path to the task file
 * @throws Error if the task file location cannot be determined
 * @private
 */
function solvePath(filePath) {
    var _a;
    if (path_1.default.isAbsolute(filePath))
        return filePath;
    const stackLines = (_a = new Error().stack) === null || _a === void 0 ? void 0 : _a.split('\n');
    if (stackLines) {
        stackLines === null || stackLines === void 0 ? void 0 : stackLines.shift();
        const callerLine = stackLines === null || stackLines === void 0 ? void 0 : stackLines.find((line) => { return line.indexOf(__filename) === -1; });
        const match = callerLine === null || callerLine === void 0 ? void 0 : callerLine.match(/\((.*):\d+:\d+\)/);
        if (match) {
            const dir = path_1.default.dirname(match[1]);
            return path_1.default.resolve(dir, filePath);
        }
    }
    throw new Error(`Could not locate task file ${path_1.default}`);
}
/**
 * Validates a cron expression to ensure it follows the correct format.
 *
 * @param expression - The cron expression to validate
 * @returns `true` if the expression is valid, `false` otherwise
 */
function validate(expression) {
    try {
        (0, pattern_validation_1.default)(expression);
        return true;
        // eslint-disable-next-line
    }
    catch (e) {
        return false;
    }
}
const nodeCron = {
    schedule,
    createTask,
    validate
};
/**
 * Default export containing the main functions of the module.
 */
exports.default = nodeCron;
//# sourceMappingURL=node-cron.js.map