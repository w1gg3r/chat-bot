"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mocha_1 = require("mocha");
const chai_1 = require("chai");
const create_id_1 = require("./create-id");
(0, mocha_1.describe)('createID function', () => {
    (0, mocha_1.it)('should create an ID with default length of 16', () => {
        const id = (0, create_id_1.createID)();
        chai_1.assert.equal(id.length, 16, 'ID should have default length of 16');
        chai_1.assert.match(id, /^[A-Za-z0-9]+$/, 'ID should only contain alphanumeric characters');
    });
    (0, mocha_1.it)('should create an ID with specified length', () => {
        const length = 24;
        const id = (0, create_id_1.createID)('', length);
        chai_1.assert.equal(id.length, length, `ID should have length of ${length}`);
        chai_1.assert.match(id, /^[A-Za-z0-9]+$/, 'ID should only contain alphanumeric characters');
    });
    (0, mocha_1.it)('should create an ID with prefix', () => {
        const prefix = 'test';
        const id = (0, create_id_1.createID)(prefix);
        chai_1.assert.isTrue(id.startsWith(`${prefix}-`), `ID should start with "${prefix}-"`);
        chai_1.assert.equal(id.length, prefix.length + 1 + 16, 'ID should have length of prefix + hyphen + 16');
        chai_1.assert.match(id, new RegExp(`^${prefix}-[A-Za-z0-9]+$`), 'ID should have prefix followed by alphanumeric characters');
    });
    (0, mocha_1.it)('should create an ID with prefix and specified length', () => {
        const prefix = 'user';
        const length = 10;
        const id = (0, create_id_1.createID)(prefix, length);
        chai_1.assert.isTrue(id.startsWith(`${prefix}-`), `ID should start with "${prefix}-"`);
        chai_1.assert.equal(id.length, prefix.length + 1 + length, 'ID should have length of prefix + hyphen + specified length');
        chai_1.assert.match(id, new RegExp(`^${prefix}-[A-Za-z0-9]+$`), 'ID should have prefix followed by alphanumeric characters');
    });
    (0, mocha_1.it)('should create unique IDs when called multiple times', () => {
        const ids = new Set();
        for (let i = 0; i < 100; i++) {
            ids.add((0, create_id_1.createID)());
        }
        chai_1.assert.equal(ids.size, 100, 'All 100 generated IDs should be unique');
    });
    (0, mocha_1.it)('should handle empty prefix correctly', () => {
        const id = (0, create_id_1.createID)('');
        chai_1.assert.isFalse(id.includes('-'), 'ID should not contain hyphen when prefix is empty');
        chai_1.assert.equal(id.length, 16, 'ID should have default length of 16');
    });
    (0, mocha_1.it)('should handle zero length correctly', () => {
        const id = (0, create_id_1.createID)('test', 0);
        chai_1.assert.equal(id, 'test-', 'ID should only contain prefix and hyphen when length is 0');
    });
});
//# sourceMappingURL=create-id.test.js.map