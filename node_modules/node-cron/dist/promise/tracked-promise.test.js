"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const tracked_promise_1 = require("./tracked-promise");
describe('Tracked Promise', function () {
    it('wraps a promise', function () {
        const tp = new tracked_promise_1.TrackedPromise((resolve) => { resolve('promise run'); });
        chai_1.assert.isDefined(tp.getPromise());
        chai_1.assert.equal(tp.getState(), 'fulfilled');
        chai_1.assert.isTrue(tp.isFulfilled());
        chai_1.assert.isFalse(tp.isPending());
        chai_1.assert.isFalse(tp.isRejected());
        chai_1.assert.equal(tp.getValue(), 'promise run');
    });
    it('returns pending status', function () {
        const tp = new tracked_promise_1.TrackedPromise((resolve) => { setTimeout(() => { resolve('promise run'); }, 500); });
        chai_1.assert.equal(tp.getState(), 'pending');
        chai_1.assert.isFalse(tp.isFulfilled());
        chai_1.assert.isTrue(tp.isPending());
        chai_1.assert.isFalse(tp.isRejected());
    });
    it('returns rejected status', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const tp = new tracked_promise_1.TrackedPromise((r, reject) => { reject(new Error('promise error')); });
            try {
                yield tp;
            }
            catch (error) {
                chai_1.assert.equal(error.message, 'promise error');
            }
            chai_1.assert.equal(tp.getState(), 'rejected');
            chai_1.assert.isFalse(tp.isFulfilled());
            chai_1.assert.isFalse(tp.isPending());
            chai_1.assert.isTrue(tp.isRejected());
            chai_1.assert.isDefined(tp.getError());
        });
    });
    it('allows await', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield new tracked_promise_1.TrackedPromise((resolve) => { resolve('promise run'); });
            chai_1.assert.equal(result, 'promise run');
        });
    });
    it('allows try catch', function () {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield new tracked_promise_1.TrackedPromise((resolve, reject) => { reject(new Error('promise error')); });
                chai_1.assert.fail('should fail before');
            }
            catch (error) {
                chai_1.assert.equal(error.message, 'promise error');
            }
        });
    });
    it('allows use then', function (done) {
        new tracked_promise_1.TrackedPromise((resolve) => { resolve('promise run'); }).then(result => {
            chai_1.assert.equal(result, 'promise run');
            done();
        });
    });
    it('allows use catch', function (done) {
        new tracked_promise_1.TrackedPromise((resolve, reject) => { reject(new Error('promise error')); }).catch(error => {
            chai_1.assert.equal(error.message, 'promise error');
            done();
        });
    });
    it('allows use finally', function (done) {
        new tracked_promise_1.TrackedPromise((resolve) => { resolve('promise run'); }).finally(() => {
            done();
        });
    });
    it('sets the state to rejected on fail', function () {
        const p = new tracked_promise_1.TrackedPromise((resolve, reject) => { reject(new Error('promise error')); });
        chai_1.assert.equal(p.getState(), 'rejected');
    });
    it('sets the state to pending when running', function () {
        const p = new tracked_promise_1.TrackedPromise((resolve) => __awaiter(this, void 0, void 0, function* () {
            yield new Promise(resolve => setTimeout(resolve, 1000));
            resolve(true);
        }));
        chai_1.assert.equal(p.getState(), 'pending');
    });
});
//# sourceMappingURL=tracked-promise.test.js.map