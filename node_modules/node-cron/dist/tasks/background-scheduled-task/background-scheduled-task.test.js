"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon_1 = __importDefault(require("sinon"));
const background_scheduled_task_1 = __importDefault(require("./background-scheduled-task"));
const stream_1 = require("stream");
describe('BackgroundScheduledTask', function () {
    this.timeout(10000);
    let fakeChildProcess;
    beforeEach(() => {
        fakeChildProcess = Object.assign(new stream_1.EventEmitter(), {
            send: sinon_1.default.stub(),
            kill: sinon_1.default.stub(),
            killed: false
        });
        // eslint-disable-next-line
        sinon_1.default.stub(require('child_process'), 'fork').returns(fakeChildProcess);
    });
    afterEach(() => {
        sinon_1.default.restore();
    });
    it('creates a new background task', function () {
        const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
        chai_1.assert.isTrue(task.id.startsWith('task-'));
        chai_1.assert.equal(task.id, task.name);
        chai_1.assert.equal(task.getStatus(), 'stopped');
    });
    describe('getNextRun', function () {
        it('returns next run', function () {
            return __awaiter(this, void 0, void 0, function* () {
                var _a;
                const task = new background_scheduled_task_1.default('* * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake(() => {
                    task.emitter.emit('task:started');
                });
                yield task.start();
                const nextMinute = new Date();
                nextMinute.setMilliseconds(0);
                nextMinute.setSeconds(0);
                nextMinute.setMinutes(nextMinute.getMinutes() + 1);
                chai_1.assert.equal((_a = task.getNextRun()) === null || _a === void 0 ? void 0 : _a.getTime(), nextMinute.getTime());
                task.destroy();
            });
        });
    });
    describe('start', () => {
        it('do not fail if already started', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess = Object.assign(new stream_1.EventEmitter(), {
                    send: sinon_1.default.stub(),
                    kill: sinon_1.default.stub()
                });
                task.forkProcess = fakeChildProcess;
                const result = yield task.start();
                chai_1.assert.isUndefined(result);
            });
        });
        it('starts new fork', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake(() => {
                    task.emitter.emit('task:started');
                });
                const result = yield task.start();
                chai_1.assert.isUndefined(result);
            });
        });
        it('fails on fork failure', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake(() => {
                    fakeChildProcess.emit('error', new Error('fake error'));
                });
                try {
                    yield task.start();
                    chai_1.assert.fail('should throw error no start');
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'Error on daemon: fake error');
                }
            });
        });
        it('fails on fork exception', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.throws(new Error('fake error'));
                try {
                    yield task.start();
                    chai_1.assert.fail('should throw error no start');
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'fake error');
                }
            });
        });
        it('fails on fork exit with code', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake(() => {
                    fakeChildProcess.emit('exit', 9);
                });
                try {
                    yield task.start();
                    chai_1.assert.fail('should throw error no start');
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'node-cron daemon exited with code 9');
                }
            });
        });
        it('fails on fork exit with signal', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake(() => {
                    fakeChildProcess.emit('exit', 'SIGNAL');
                });
                try {
                    yield task.start();
                    chai_1.assert.fail('should throw error no start');
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'node-cron daemon exited with code SIGNAL');
                }
            });
        });
        it('starts and bypass events', function () {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake(() => __awaiter(this, void 0, void 0, function* () {
                    task.emitter.emit('task:started');
                    yield wait(100);
                    fakeChildProcess.emit('message', { event: 'execution:failed', context: { date: new Date(), task: Object.assign({ state: task.stateMachine.state }, task), execution: {} }, jsonError: JSON.stringify({ name: 'Error', message: 'task failed', extra: 'extra', stack: 'fake stack' }) });
                }));
                const waitEvent = new Promise(r => {
                    task.on('execution:failed', event => {
                        r(event);
                    });
                });
                yield task.start();
                const event = yield waitEvent;
                chai_1.assert.equal((_a = event.execution) === null || _a === void 0 ? void 0 : _a.error.message, 'task failed');
                chai_1.assert.equal((_b = event.execution) === null || _b === void 0 ? void 0 : _b.error.extra, 'extra');
                chai_1.assert.equal((_c = event.execution) === null || _c === void 0 ? void 0 : _c.error.stack, 'fake stack');
                chai_1.assert.equal(event.task.stateMachine.state, 'idle');
            });
        });
        it('fails on start timeout', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess = Object.assign(new stream_1.EventEmitter(), {
                    send: sinon_1.default.stub(),
                    kill: sinon_1.default.stub()
                });
                try {
                    yield task.start();
                    chai_1.assert.fail("should fail before");
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'Start operation timed out');
                }
            });
        });
    });
    describe('stop', function () {
        it('do not fail if the task is stoped', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                const result = yield task.stop();
                chai_1.assert.isUndefined(result);
            });
        });
        it('stop the task', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                task.forkProcess = fakeChildProcess;
                fakeChildProcess.send.callsFake(() => {
                    task.emitter.emit('task:stopped');
                });
                const result = yield task.stop();
                chai_1.assert.isUndefined(result);
            });
        });
        it('fails on stop timeout', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                task.forkProcess = fakeChildProcess;
                try {
                    yield task.stop();
                    chai_1.assert.fail("should fail before");
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'Stop operation timed out');
                }
            });
        });
    });
    describe('destroy', function () {
        it('destroys stopped task', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                const result = yield task.destroy();
                chai_1.assert.isUndefined(result);
            });
        });
        it('destroys a task an kills the fork', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                task.forkProcess = fakeChildProcess;
                fakeChildProcess.send.callsFake(() => {
                    task.emitter.emit('task:destroyed');
                });
                const result = yield task.destroy();
                chai_1.assert.isUndefined(result);
            });
        });
        it('fails on destriy timeout', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                task.forkProcess = fakeChildProcess;
                try {
                    yield task.destroy();
                    chai_1.assert.fail("should fail before");
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'Destroy operation timed out');
                }
            });
        });
    });
    describe('execute', function () {
        it('fails when call execute on stoped task', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                try {
                    yield task.execute();
                }
                catch (error) {
                    chai_1.assert.equal(error.message, "Cannot execute background task because it hasn't been started yet. Please initialize the task using the start() method before attempting to execute it.");
                }
            });
        });
        it('executes a task', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake((obj) => {
                    if (obj.command === 'task:execute') {
                        task.emitter.emit('execution:finished', { execution: { result: "task result" } });
                    }
                    else {
                        task.emitter.emit('task:started');
                    }
                });
                yield task.start();
                const result = yield task.execute();
                chai_1.assert.equal(result, 'task result');
            });
        });
        it('throw error on execution fail', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake((obj) => {
                    if (obj.command === 'task:execute') {
                        task.emitter.emit('execution:failed', { execution: { error: Error("task error") } });
                    }
                    else {
                        task.emitter.emit('task:started');
                    }
                });
                yield task.start();
                try {
                    yield task.execute();
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'task error');
                }
            });
        });
        it('fails on execute timeout', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const task = new background_scheduled_task_1.default('* * * * * *', './test-assets/dummy-task.js');
                fakeChildProcess.send.callsFake((obj) => {
                    if (obj.command === 'task:start') {
                        task.emitter.emit('task:started');
                    }
                });
                yield task.start();
                try {
                    yield task.execute();
                    chai_1.assert.fail("should fail before");
                }
                catch (error) {
                    chai_1.assert.equal(error.message, 'Execution timeout exceeded');
                }
            });
        });
    });
});
function wait(time) {
    return new Promise(r => setTimeout(r, time));
}
//# sourceMappingURL=background-scheduled-task.test.js.map