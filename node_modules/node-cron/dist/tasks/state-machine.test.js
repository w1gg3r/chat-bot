"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const state_machine_1 = require("./state-machine");
describe('StateMachine', function () {
    it('should initialize with default state "stopped"', function () {
        const sm = new state_machine_1.StateMachine();
        chai_1.assert.equal(sm.state, 'stopped');
    });
    it('should allow valid transitions from "stopped" to "idle"', function () {
        const sm = new state_machine_1.StateMachine();
        sm.changeState('idle');
        chai_1.assert.equal(sm.state, 'idle');
    });
    it('should allow valid transitions from "idle" to "running"', function () {
        const sm = new state_machine_1.StateMachine('idle');
        sm.changeState('running');
        chai_1.assert.equal(sm.state, 'running');
    });
    it('should throw on invalid transition from "stopped" to "running"', function () {
        const sm = new state_machine_1.StateMachine('stopped');
        chai_1.assert.throws(() => sm.changeState('running'), /invalid transition/);
    });
    it('should allow multiple valid transitions', function () {
        const sm = new state_machine_1.StateMachine('stopped');
        sm.changeState('idle');
        sm.changeState('running');
        sm.changeState('stopped');
        sm.changeState('destroyed');
        chai_1.assert.equal(sm.state, 'destroyed');
    });
    it('should not allow any transition from "destroyed"', function () {
        const sm = new state_machine_1.StateMachine('destroyed');
        chai_1.assert.throws(() => sm.changeState('idle'), /invalid transition/);
        chai_1.assert.throws(() => sm.changeState('stopped'), /invalid transition/);
    });
});
//# sourceMappingURL=state-machine.test.js.map